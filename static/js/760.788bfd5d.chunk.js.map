{"version":3,"file":"static/js/760.788bfd5d.chunk.js","mappings":"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","sources":["webpack://kamasutra/./src/components/Profile/MyPosts/ProfileInfo.module.css?3a51","components/Profile/MyPosts/ProfileStatusFunc.jsx","components/Profile/MyPosts/ProfileDataForm.jsx","components/Profile/MyPosts/ProfileInfo.jsx","webpack://kamasutra/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.jsx","webpack://kamasutra/./src/components/Profile/MyPosts/MyPosts.module.css?831b","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/Post/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"ava\":\"ProfileInfo_ava__6QMR5\",\"content_logo\":\"ProfileInfo_content_logo__8p191\",\"description\":\"ProfileInfo_description__2zthQ\",\"main_content_img\":\"ProfileInfo_main_content_img__JFuWp\",\"profileInput\":\"ProfileInfo_profileInput__ia+5T\",\"statusBlock\":\"ProfileInfo_statusBlock__eMyry\",\"fullName\":\"ProfileInfo_fullName__mQrGA\",\"contacts\":\"ProfileInfo_contacts__r3Hh7\",\"aboutMe\":\"ProfileInfo_aboutMe__dUdsd\",\"descriptionItem\":\"ProfileInfo_descriptionItem__B+z9U\",\"contactValue\":\"ProfileInfo_contactValue__KLpw7\",\"contactItem\":\"ProfileInfo_contactItem__pFGeS\",\"formSummaryError\":\"ProfileInfo_formSummaryError__9BkTs\",\"descriptionEdit\":\"ProfileInfo_descriptionEdit__cirt8\"};","import React, { useEffect, useState } from 'react';\r\nimport style from './ProfileInfo.module.css'\r\n\r\nexport default function ProfileStatusFunc(props) {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [status, setStatus] = useState(\"enter your status New\")\r\n\r\n    useEffect(()=> {\r\n        setStatus(props.status);\r\n    }, [props.status])\r\n\r\n    const activateEditMode = ()=> {\r\n        setEditMode(true)\r\n    }\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n  return (\r\n    <div>\r\n    {!editMode &&\r\n        <div className={style.statusBlock}>\r\n            <span onDoubleClick={activateEditMode} >{props.status || \"enter your status\"}</span>\r\n        </div>}\r\n   {editMode &&\r\n        <div>\r\n            <input onChange={onStatusChange}  autoFocus={true} onBlur={deactivateEditMode} value={status}/>\r\n        </div>}\r\n    \r\n   \r\n\r\n</div>\r\n  )\r\n}\r\n","import React from \"react\";\r\nimport { reduxForm } from \"redux-form\";\r\nimport { Input, Textarea, createField } from \"../../FormControls/FormControls\";\r\nimport style from \"./ProfileInfo.module.css\";\r\n\r\n\r\n const ProfileDataForm =(props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n          <button  >save</button>\r\n          {props.error && <div className={style.formSummaryError }>{props.error}</div>}\r\n        </div>\r\n        <div>\r\n            <p>Full Name: {createField(\"Full Name\", \"fullName\", [], Input)}</p> \r\n        </div>\r\n        <div>\r\n        <p>Looking for a job:{createField('', 'lookingForAJob', [], Input, {type: \"checkbox\"})}</p> \r\n        </div>\r\n        <div> <p>My professional skills: {createField(\"Skills\", 'lookingForAJobDescription', [], Textarea )}</p> \r\n            </div>\r\n        <div>\r\n        <p > About me:{createField(\"About me\", \"aboutMe\", [], Textarea)}</p>\r\n        </div>\r\n        <div>\r\n        <p className={style.contacts}>Contacts</p> \r\n        <div className={style.descriptionEdit}>\r\n        \r\n             {Object.keys(props.profile.contacts || {}).map(key => {\r\n        \r\n              return <div key={key}>\r\n                <p>{key}: {createField(key, \"contacts.\" + key, [], Input)}</p>\r\n                 </div>\r\n             })}\r\n        </div>\r\n        </div>\r\n \r\n      </form>\r\n    )\r\n  \r\n  }\r\n\r\n  const ProfileDataReduxForm = reduxForm({\r\n    // a unique name for the form\r\n    form: 'profileData'\r\n  })(ProfileDataForm)\r\n  export default ProfileDataReduxForm;","import React, { useState } from \"react\";\r\nimport style from \"./ProfileInfo.module.css\";\r\nimport Preloader from \"../../Preloader/Preloader\";\r\n\r\nimport ProfileStatusFunc from \"./ProfileStatusFunc\";\r\n\r\nimport ProfileDataReduxForm from \"./ProfileDataForm\";\r\nlet url = \"https://buzookod.ru/media/2816616767_vubrbeJ.jpg\";\r\n\r\nexport default function ProfileInfo(props) {\r\n\r\nlet [editMode, setEditMode] = useState(false);\r\n\r\n  if (!props.profile) {\r\n    return <Preloader />;\r\n  }\r\n\r\n  const onMainPhotoSelected = (e) => {\r\n    if (e.target.files.length) {\r\n      props.savePhoto(e.target.files[0]);\r\n    }\r\n  };\r\n\r\n  const onSubmit = (formData) => {\r\n    props.saveProfile(formData).then( //надо дождаться с сервера ответа на наличие ошибки и только потом закрывать режим редактирования\r\n    (res) => {\r\n      if(!res)  return setEditMode(false) //saveProfileThunk делаю return response.data.resultCode который возвращает инфу о налчии/отсутствии ошибки\r\n    }\r\n   );\r\n  \r\n   \r\n  }\r\n  return (\r\n    <div>\r\n      <div>\r\n        <img\r\n          className={style.main_content_img}\r\n          src=\"https://static.tildacdn.com/tild3031-6564-4332-a464-643231303036/39.jpg\"\r\n          alt=\"\"\r\n        ></img>\r\n      </div>\r\n\r\n      {/*<ProfileStatus status={props.status} updateStatus={props.updateStatus}/>*/}\r\n      <ProfileStatusFunc\r\n        status={props.status}\r\n        updateStatus={props.updateStatus}\r\n      />\r\n      <div >\r\n        <div className={style.ava}>\r\n          <img\r\n            className={style.content_logo}\r\n            src={props.profile.photos.small || url} alt=\"\"></img>\r\n          \r\n        </div>\r\n        <div>\r\n        {props.isOwner && (\r\n          <input\r\n            className={style.profileInput}\r\n            type={\"file\"}\r\n            onChange={onMainPhotoSelected}\r\n          />\r\n        )}\r\n        </div>\r\n         \r\n      </div>\r\n      {editMode ? <ProfileDataReduxForm initialValues={props.profile} onSubmit={onSubmit} profile={props.profile}  /> \r\n      : <ProfileData profile={props.profile} isOwner={props.isOwner}\r\n      toEditMode={() => {setEditMode(true)}}/> }\r\n          \r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nconst ProfileData = ({profile, isOwner, toEditMode}) => {\r\n\r\n  return (<div>\r\n    <h3 className={style.fullName}>{profile.fullName}</h3>\r\n    <div>\r\n      {isOwner && <button onClick={toEditMode}>edit</button>}\r\n    </div>\r\n      <p className={style.contacts}>Contacts</p> \r\n        <div className={style.description}>\r\n        \r\n             {Object.keys(profile.contacts || {}).map(key => {\r\n        \r\n              return <Contacts key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n             })}\r\n        </div>\r\n        <div className={style.aboutMe}>aboutMe:\r\n          <p > {profile.aboutMe}</p>\r\n          <p>Looking for a job: {profile.lookingForAJob ? 'yes' : 'no'}</p>\r\n              </div>\r\n              {profile.lookingForAJob &&\r\n        <div> <p>My professional skills: {profile.lookingForAJobDescription}</p>\r\n            </div>}\r\n  </div>\r\n  \r\n  )\r\n}\r\n\r\nconst Contacts = ({contactTitle, contactValue}) => {\r\n  return (<div className={style.contactItem}> \r\n              <div>{contactTitle}: </div>\r\n                    <div className={style.contactValue}>{contactValue}</div> \r\n              \r\n          </div>)\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"post_avatar\":\"Post_post_avatar__+BmV4\",\"post\":\"Post_post__uEs8H\"};","import React from 'react'\r\nimport style from './Post.module.css'\r\n\r\nexport default function Post(props) {\r\n  return (\r\n    <div className={style.post}>\r\n        <img className={style.post_avatar} src='https://w7.pngwing.com/pngs/73/738/png-transparent-flower-graphy-flower-purple-violet-lilac.png'></img>\r\n        <span>{props.message}</span>\r\n        <div>Like {props.likesCount}</div>\r\n        </div>\r\n        \r\n  )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"new_posts\":\"MyPosts_new_posts__op6dy\",\"title\":\"MyPosts_title__USYvv\",\"button_block\":\"MyPosts_button_block__Kc6fS\"};","import React from \"react\";\r\nimport Post from \"./Post/Post\";\r\nimport style from \"./MyPosts.module.css\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport {\r\n  maxLengthCreator,\r\n  requiredField,\r\n} from \"../../../utils/validators/validator\";\r\nimport { Textarea } from \"../../FormControls/FormControls\";\r\n\r\nconst maxLength10 = maxLengthCreator(10); //устанавливаем значие длины сообщения\r\n\r\n//React.memo для контроля перерендинга в функциональной компоненте, перерендинг ТОЛЬКО при изменении пропс или стайт\r\n//в классовой компоненте для этих целей надо использовать extends React.PureComponent\r\nconst MyPosts = React.memo((props) => {\r\n //alert('render')\r\n //console.log(\"RENDER\")\r\n //функция reverse изменяет state, чтобы этого не было компонента должна для работы сосздать КОПИЮ стайта [...props.postsData], а не использовать сам стайт props.postsData\r\n  let postsElements = [...props.postsData].reverse().map((obj) => { \r\n    return <Post key={obj.id} message={obj.post} likesCount={obj.likesCount} />;\r\n  });\r\n\r\n  let onAddPost = (values) => {\r\n    props.addPost(values.newPostText); //newPostText название name из Field\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2 className={style.title}>My posts</h2>\r\n\r\n      <AddPostFormRedux onSubmit={onAddPost} />\r\n\r\n      <div className={style.new_posts}>New posts</div>\r\n      {postsElements}\r\n    </div>\r\n  );\r\n})\r\n\r\n\r\n\r\nconst addPostForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <Field\r\n        component={Textarea}\r\n        name=\"newPostText\"\r\n        validate={[requiredField, maxLength10]}\r\n        placeholder=\"Post text\"\r\n      />\r\n\r\n      <div className={style.button_block}>\r\n        <button>Add post</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\nconst AddPostFormRedux = reduxForm({ form: \"myPostsAddForm\" })(addPostForm);\r\nexport default MyPosts;\r\n","import React from \"react\";\r\n\r\nimport MyPosts from \"../MyPosts\";\r\nimport { addPostActionCreator } from \"../../../../redux/profileReducer\";\r\nimport { connect } from \"react-redux\";\r\n\r\n\r\n\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        postsData: state.profilePage.postsData,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n     \r\n        addPost: (newPostText)=> { //newPostText название name из Field из MyPosts\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n\r\n    }\r\n}\r\nconst MyPostsContainer = connect (mapStateToProps, mapDispatchToProps) (MyPosts)\r\n\r\nexport default MyPostsContainer;","import React from \"react\";\r\n\r\nimport ProfileInfo from \"./MyPosts/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/Post/MyPostsContainer\";\r\n\r\n\r\n\r\nfunction Profile (props) {\r\n    return (\r\n        <div >\r\n        \r\n       <ProfileInfo profile={props.profile}\r\n       status={props.status} \r\n       updateStatus={props.updateStatus}\r\n       isOwner={props.isOwner}\r\n       savePhoto={props.savePhoto}\r\n       saveProfile={props.saveProfile}/>\r\n        <MyPostsContainer\r\n       // store = {props.store}\r\n    \r\n        \r\n         />\r\n       \r\n       \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;\r\n\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport Profile from \"./Profile\";\r\nimport { connect } from \"react-redux\";\r\nimport { getUserProfileThunk, getUserStatusThunk, savePhotoThunk, saveProfileThunk, setUserProfileCreator, updateUserStatusThunk } from \"../../redux/profileReducer\";\r\nimport { Navigate, useLocation, useNavigate, useParams } from \"react-router-dom\";\r\nimport { usersAPI } from \"../../api/api\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\n//withRouter чтобы прокидывать url адрес пользователя в profile\r\nfunction withRouter(Component) {\r\n    function ComponentWithRouterProp(props) {\r\n        let location = useLocation();\r\n        let navigate = useNavigate();\r\n        let params = useParams();\r\n        return (\r\n            <Component\r\n                {...props}\r\n                router={{ location, navigate, params }}\r\n            />\r\n        );\r\n    }\r\n\r\n    return ComponentWithRouterProp;\r\n}\r\n\r\n\r\nclass ProfileContainer extends React.Component  {\r\n    \r\n    refreshProfile() {\r\n     // debugger;\r\n        let profileId = this.props.router.params.userId; //userId это название роута из App.js\r\n        if (!profileId) {\r\n            profileId = this.props.authorezedUserId\r\n        }\r\n        this.props.getUserProfileThunk(profileId)\r\n        this.props.getUserStatusThunk(profileId)\r\n      /* перенос в profileReduser\r\n       profileAPI.getProfile(profileId)\r\n            (перенос в api и замена на profileAPI.getProfile)\r\n            axios.get(`https://social-network.samuraijs.com/api/1.0/profile/${profileId}`) \r\n        .then(res => {\r\n            this.props.setUserProfile(res.data)\r\n           \r\n          });*/\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    //чтобы обновить пользователя при смене его Id\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if(this.props.router.params.userId !== prevProps.router.params.userId)  {\r\n            this.refreshProfile();\r\n        }\r\n        \r\n    }\r\n\r\n    render() {\r\n        \r\n        return (\r\n                <div >\r\n                \r\n            <Profile \r\n                {...this.props} \r\n                isOwner= {!this.props.router.params.userId} //двойное отрицание приводит к булевому значению false. т.е если Id не указано то ты owner так как прошла авторизация\r\n                profile={this.props.profile} \r\n                status = {this.props.status}\r\n                updateStatus= {this.props.updateStatus}\r\n                savePhoto = {this.props.savePhoto}\r\n            \r\n            \r\n            /> \r\n            {/* {...this.props}передача всех props*/}\r\n           \r\n            \r\n            \r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n  \r\n\r\n    //hoc перенос в compose\r\n    //let AuthRedirectComponent = withAuthRedirect(ProfileContainer)\r\n    \r\n   /*запись аналогична let AuthRedirectComponent =  (props) => {\r\n        if (!props.isAuth) return <Navigate to=\"/login\"></Navigate>\r\n        return <ProfileContainer {...props}/>\r\n    }*/\r\n    \r\n  \r\n\r\n\r\n\r\n    let mapStateToProps = (state) => ({\r\n        profile: state.profilePage.profile,\r\n      //  isAuth: state.auth.isAuth\r\n      status: state.profilePage.status,\r\n      authorezedUserId: state.auth.id,\r\n      isAuth: state.auth.isAuth\r\n       \r\n    })\r\n\r\n// перенос в compose\r\n/*export default connect (mapStateToProps, {\r\n    setUserProfile: setUserProfileCreator ,\r\n    getUserProfileThunk: getUserProfileThunk\r\n}) (withRouter(AuthRedirectComponent))*/\r\n\r\nexport default  compose(connect (mapStateToProps, {\r\n   // setUserProfile: setUserProfileCreator ,\r\n    getUserProfileThunk: getUserProfileThunk,\r\n    getUserStatusThunk: getUserStatusThunk,\r\n    updateStatus: updateUserStatusThunk,\r\n    savePhoto: savePhotoThunk,\r\n    saveProfile: saveProfileThunk,\r\n\r\n\r\n}),\r\n    withRouter,\r\n    withAuthRedirect\r\n )(ProfileContainer)"],"names":["ProfileStatusFunc","props","editMode","setEditMode","useState","status","setStatus","useEffect","_jsxs","children","_jsx","className","style","statusBlock","onDoubleClick","activateEditMode","onChange","e","currentTarget","value","autoFocus","onBlur","deactivateEditMode","updateStatus","reduxForm","form","onSubmit","handleSubmit","error","formSummaryError","createField","Input","type","Textarea","contacts","descriptionEdit","Object","keys","profile","map","key","url","ProfileInfo","Preloader","main_content_img","src","alt","ava","content_logo","photos","small","isOwner","profileInput","target","files","length","savePhoto","ProfileDataReduxForm","initialValues","formData","saveProfile","then","res","ProfileData","toEditMode","_ref","fullName","onClick","description","Contacts","contactTitle","contactValue","aboutMe","lookingForAJob","lookingForAJobDescription","_ref2","contactItem","Post","message","likesCount","maxLength10","maxLengthCreator","MyPosts","React","postsElements","postsData","reverse","obj","post","id","AddPostFormRedux","values","addPost","newPostText","Field","component","name","validate","requiredField","placeholder","connect","state","profilePage","dispatch","addPostActionCreator","MyPostsContainer","ProfileContainer","refreshProfile","profileId","this","router","params","userId","authorezedUserId","getUserProfileThunk","getUserStatusThunk","componentDidMount","componentDidUpdate","prevProps","prevState","snapshot","render","Profile","compose","auth","isAuth","updateUserStatusThunk","savePhotoThunk","saveProfileThunk","Component","location","useLocation","navigate","useNavigate","useParams","withAuthRedirect"],"sourceRoot":""}