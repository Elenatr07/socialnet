{"version":3,"file":"static/js/878.b29b67f8.chunk.js","mappings":"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","sources":["components/Dialogs/Dialog/Dialog.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"sourcesContent":["import React from 'react'\r\n\r\nimport style from './../Dialogs.module.css'\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\nlet url = \"https://buzookod.ru/media/2816616767_vubrbeJ.jpg\";\r\nexport default function Dialog (props) {\r\n\r\n\r\n  return (\r\n  <div >\r\n    <div className={style.friendBlock}>\r\n      <NavLink to={\"/profile/\" + props.id}> <div className={style.photoBlock}>\r\n          <img className={style.dialogsPhoto} \r\n           src={props.photos.small || url} alt=''/>\r\n      </div>\r\n      </NavLink>\r\n      \r\n    <div className={style.nameFriend}  >\r\n      <div>{props.name} </div>\r\n        <div className={style.newMessages} >{props.newMessages}</div>\r\n    </div> \r\n    \r\n    </div>\r\n      \r\n      \r\n\r\n  \r\n\r\n  </div>\r\n  ) \r\n}","import React, { useEffect, useState  } from 'react'\r\nimport style from \"./Dialogs.module.css\"\r\n\r\nimport Dialog from './Dialog/Dialog'\r\nimport Message from './Message/Message'\r\nimport { NavLink} from 'react-router-dom'\r\nimport {Field, reduxForm, reset } from \"redux-form\"\r\nimport { Textarea } from '../FormControls/FormControls'\r\nimport { maxLengthCreator, requiredField } from '../../utils/validators/validator'\r\nimport MessageBlock from './MessageBlock'\r\nimport Paginator from '../FormControls/Paginator/Paginator'\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default function Dialogs(props) {\r\n\r\nlet friendId = props.router.params.friendId;\r\nlet owner = props.owner\r\nlet isUser = !friendId ? owner : friendId\r\nlet onPageChanged = (currentPage) => {\r\n    props.getListMessages(friendId, currentPage, props.pageSize)}\r\n\r\nuseEffect(()=> {\r\n    \r\n    props.getChating();\r\n}, [])\r\n\r\nuseEffect(()=> {\r\n    props.getListMessages(isUser, props.currentPage, props.pageSize)\r\n}, [props.currentPage])\r\n\r\n\r\n\r\n\r\nlet dialogsElements = props.dialogsData.map((obj) => {\r\n   \r\n      \r\n    return(\r\n      \r\n        <NavLink className={navData=> navData.isActive ? style.active : style.dialog} \r\n        to={\"/dialogs/\"+ obj.id} onClick={()=> {props.getListMessages(obj.id)}}>\r\n            <Dialog key={obj.id} name={obj.userName} id={obj.id} newMessages={obj.newMessagesCount} \r\n            photos={obj.photos} lastdialog = {obj.lastDialogActivityDate} lastActivity={obj.lastUserActivityDate}\r\n              />\r\n\r\n        </NavLink>\r\n       \r\n    )\r\n   \r\n    \r\n})\r\n\r\n\r\n\r\nlet addNewMessege = (values) => {\r\n \r\n   props.sendMessage(isUser, values.body)\r\n  \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//alert (props.isAuth)\r\n//перенесено в AuthRedirectComponent в DialogsContainer\r\n//if (props.isAuth === false) return <Navigate to=\"/login\"></ >\r\n  return (\r\n    <div className={style.dialogs}> \r\n  \r\n        <div className={style.dialog_items}>\r\n            <h2>Dialogs</h2>\r\n         \r\n               \r\n            {dialogsElements}\r\n         \r\n\r\n        </div>\r\n    \r\n        <div className={style.messages}> \r\n        <MessageBlock friendId={isUser} dialogs={props.dialogs} owner={owner} \r\n        delMessage={props.delMessage}  />\r\n        <Paginator   currentPage={props.currentPage} \r\n                onPageChanged={onPageChanged} \r\n                totalItemsCount={props.totalMessagesCount}\r\n                pageSize={props.pageSize} />\r\n            \r\n            {friendId  ? <AddMessageFormRedux onSubmit={addNewMessege}  />: <div>select a dialog</div>}\r\n\r\n          \r\n        </div>\r\n        <div>\r\n            \r\n        </div>\r\n        \r\n    </div>\r\n  )\r\n}\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n        <div className={style.block_textarea}>\r\n            <Field component={Textarea} name=\"body\"  placeholder='Enter your message'\r\n            validate={[requiredField, maxLength50]}/>\r\n      \r\n        </div>\r\n        <div className={style.button_block}>\r\n            <button className={style.send_message} >Send</button>\r\n        </div>\r\n    </form>\r\n    )\r\n}\r\n\r\n\r\nconst afterSubmit = (result, dispatch) =>\r\n  dispatch(reset('dialogAddMessageForm')); //очитска полей формы после отправки\r\n\r\nconst AddMessageFormRedux =  reduxForm({form: 'dialogAddMessageForm',  \r\nonSubmitSuccess: afterSubmit, }) (AddMessageForm)\r\n\r\n\r\n","import React from 'react'\r\n\r\nimport { delMessageThunk, getChatingThunk, getFriendsThunk, getListMessagesThunk, sendMessageCreator, sendMessageThunk, startChatingThunk } from '../../redux/dialogsReducer'\r\nimport Dialogs from './Dialogs'\r\nimport { connect } from 'react-redux'\r\n\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect'\r\nimport { compose } from 'redux'\r\nimport { getPageSize, getTotalUsersCount, getcurrentPaget } from '../../redux/usersSelector'\r\nimport { getUsersThunkCreator } from '../../redux/usersReducer'\r\nimport { withRouter } from '../Profile/ProfileContainer'\r\n\r\n\r\n\r\n\r\n\r\n\r\n//hoc\r\n  //  let AuthRedirectComponent = withAuthRedirect(Dialogs) //передано в compose\r\n   /* аналогично let AuthRedirectComponent =\r\n    (props) => {\r\n        if (!props.isAuth) return <Navigate to=\"/login\"></Navigate>\r\n        return <Dialogs {...props}/>\r\n    }*/\r\n\r\n    let mapStateToProps = (state) => {\r\n        return {\r\n            dialogsData: state.dialogsPage.dialogsData,\r\n            messageData: state.dialogsPage.messageData,\r\n            newMessageText: state.dialogsPage.newMessageText,\r\n           // isAuth: state.auth.isAuth\r\n           dialogs: state.dialogsPage.dialogs,\r\n           friends: state.dialogsPage.friends,\r\n           pageSize: state.dialogsPage.pageSize,\r\n           totalMessagesCount: state.dialogsPage.totalMessagesCount,\r\n            currentPage: state.dialogsPage.currentPage,\r\n            owner: state.auth.id,\r\n        \r\n\r\n\r\n        }\r\n    }\r\n    let mapDispatchToProps = (dispatch) => {\r\n        return {\r\n            sendMessage: (newMessageText) => { //newMessageTaet это название name из Fielg в Dialogs\r\n                dispatch(sendMessageCreator(newMessageText))\r\n            },\r\n           \r\n\r\n        }\r\n    }\r\n //const DialogsContainer = connect (mapStateToProps, mapDispatchToProps ) (AuthRedirectComponent) \r\n //передано в compose\r\n\r\n export default compose(\r\n    connect(mapStateToProps, {mapDispatchToProps, \r\n    getListMessages: getListMessagesThunk,\r\n    getFriends: getFriendsThunk,\r\n    getUsersThunk: getUsersThunkCreator,\r\n    getChating: getChatingThunk,\r\n    sendMessage:sendMessageThunk,\r\n    delMessage: delMessageThunk\r\n\r\n    \r\n}),\r\n    withRouter,\r\n    withAuthRedirect)(Dialogs)"],"names":["url","Dialog","props","_jsx","children","_jsxs","className","style","friendBlock","NavLink","to","id","photoBlock","dialogsPhoto","src","photos","small","alt","nameFriend","name","newMessages","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmitSuccess","afterSubmit","result","dispatch","reset","onSubmit","handleSubmit","block_textarea","Field","component","Textarea","placeholder","validate","requiredField","button_block","send_message","compose","connect","state","dialogsData","dialogsPage","messageData","newMessageText","dialogs","friends","pageSize","totalMessagesCount","currentPage","owner","auth","mapDispatchToProps","sendMessage","sendMessageCreator","getListMessages","getListMessagesThunk","getFriends","getFriendsThunk","getUsersThunk","getUsersThunkCreator","getChating","getChatingThunk","sendMessageThunk","delMessage","delMessageThunk","withRouter","withAuthRedirect","friendId","router","params","isUser","useEffect","dialogsElements","map","obj","navData","isActive","active","dialog","onClick","userName","newMessagesCount","lastdialog","lastDialogActivityDate","lastActivity","lastUserActivityDate","dialog_items","messages","MessageBlock","Paginator","onPageChanged","totalItemsCount","values","body"],"sourceRoot":""}