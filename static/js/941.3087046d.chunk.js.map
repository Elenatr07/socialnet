{"version":3,"file":"static/js/941.3087046d.chunk.js","mappings":"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","sources":["components/Dialogs/MessageBlock.jsx","components/Dialogs/Message/Message.jsx","webpack://kamasutra/./src/components/Profile/MyPosts/ProfileInfo.module.css?3a51","components/Profile/MyPosts/ProfileStatusFunc.jsx","components/Profile/MyPosts/ProfileDataForm.jsx","components/Profile/MyPosts/ProfileInfo.jsx","webpack://kamasutra/./src/components/Profile/MyPosts/MyPosts.module.css?831b","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/Post/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx","webpack://kamasutra/./src/components/Dialogs/Dialogs.module.css?1b2e"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport Message from \"./Message/Message\";\r\nimport Paginator from \"../FormControls/Paginator/Paginator\";\r\n\r\nexport default function MessageBlock(props) {\r\n  //функция reverse изменяет state, чтобы этого не было компонента должна для работы сосздать КОПИЮ стайта [...props.postsData], а не использовать сам стайт props.postsData\r\n\r\n  let messagesElemants = [...props.dialogs].reverse().map((obj) => {\r\n   \r\n\r\n    return (\r\n      <div>\r\n        <Message\r\n          key={obj.id}\r\n          messageId={obj.id}\r\n          message={obj.body}\r\n          senderId={obj.senderId}\r\n          friendId={obj.recipientId}\r\n          owner={props.owner}\r\n          senderName={obj.senderName}\r\n          addedAt={obj.addedAt}\r\n          viewed={obj.viewed}\r\n          delMessage={props.delMessage}\r\n        />\r\n      </div>\r\n    );\r\n  });\r\n  return <div>{messagesElemants}</div>;\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport style from \"./../Dialogs.module.css\";\r\nimport checkMarckGreen from \"./../../../img/checkMarckGreen.jpg\";\r\nimport checkMarckBlack from './../../../img/checkMarkBlack.png'\r\nimport backet from './../../../img/backet.png'\r\n\r\nimport moment from \"moment\";\r\n\r\n\r\nlet url = \"https://buzookod.ru/media/2816616767_vubrbeJ.jpg\";\r\nexport default function Message(props) {\r\n\r\n \r\n    const imgPath={\r\n      notViewed: checkMarckBlack,\r\n      wiewed: checkMarckGreen\r\n    }\r\n  const[open, setOpen] = useState(true);\r\n  \r\n  const toggleCheckMark = () => {\r\n    setOpen(false)\r\n  }\r\n \r\n  const delMessage = (messageId) => {\r\n    props.delMessage(messageId =props.messageId)\r\n  }\r\n\r\n  const getCheckMarkImg = ()=> open ? 'notViewed' : 'wiewed'\r\n  const imgCheck = getCheckMarkImg()\r\n\r\n\r\n  let newDate = moment(props.addedAt).format('DD/MM/YYYY, h:mm a')\r\n\r\n  let owner = props.owner === props.senderId;\r\n\r\n  return (\r\n    <div className={owner ? style.message : style.messageRecieved}>\r\n      <div className={style.messageBlock}>\r\n        <div className={style.dateBlock}>\r\n           <div>{props.senderName}</div>\r\n        <div>{newDate}</div>\r\n        </div>\r\n       \r\n         {owner ? (\r\n          <div className={style.messageBody}> \r\n          <p>{props.message}</p>\r\n          <div className={style.checkMarkBox}>\r\n            <img onClick={delMessage} className={style.backet} src={backet} alt=\"\" />\r\n            {props.viewed ? \r\n          <img className={style.checkMark} src={checkMarckGreen} alt=\"\"/> : \r\n          <img className={style.checkMark} src={checkMarckBlack} alt=\"\"/>}\r\n          \r\n          </div>\r\n          \r\n          </div>\r\n        ) : (\r\n          <div  className={props.viewed ? style.messageBodyRecieved : style.newMessage}>\r\n            <p>{props.message}</p>\r\n            <div  className={style.checkMarkBox}>{props.viewed ? \r\n              <img className={style.checkMark} src={checkMarckGreen} alt=\"\"/> : \r\n              <img onClick={toggleCheckMark} className={style.checkMark} src={imgPath[imgCheck]} alt=\"\"/>}</div>\r\n          </div>\r\n        )}\r\n      </div>\r\n      \r\n        \r\n      \r\n      <div>\r\n       \r\n      </div>\r\n   \r\n    </div>\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"ava\":\"ProfileInfo_ava__6QMR5\",\"content_logo\":\"ProfileInfo_content_logo__8p191\",\"description\":\"ProfileInfo_description__2zthQ\",\"main_content_img\":\"ProfileInfo_main_content_img__JFuWp\",\"profileInput\":\"ProfileInfo_profileInput__ia+5T\",\"statusBlock\":\"ProfileInfo_statusBlock__eMyry\",\"fullName\":\"ProfileInfo_fullName__mQrGA\",\"contacts\":\"ProfileInfo_contacts__r3Hh7\",\"aboutMe\":\"ProfileInfo_aboutMe__dUdsd\",\"descriptionItem\":\"ProfileInfo_descriptionItem__B+z9U\",\"contactValue\":\"ProfileInfo_contactValue__KLpw7\",\"contactItem\":\"ProfileInfo_contactItem__pFGeS\",\"formSummaryError\":\"ProfileInfo_formSummaryError__9BkTs\",\"descriptionEdit\":\"ProfileInfo_descriptionEdit__cirt8\",\"profileEditButton\":\"ProfileInfo_profileEditButton__e9v0D\"};","import React, { useEffect, useState } from 'react';\r\nimport style from './ProfileInfo.module.css'\r\n\r\nexport default function ProfileStatusFunc(props) {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [status, setStatus] = useState(\"enter your status New\")\r\n\r\n    useEffect(()=> {\r\n        setStatus(props.status);\r\n    }, [props.status])\r\n\r\n    const activateEditMode = ()=> {\r\n        if(props.isOwner) {\r\n         setEditMode(true)   \r\n        }\r\n        \r\n    }\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n  return (\r\n    <div>\r\n   \r\n    {!editMode &&\r\n        <div className={style.statusBlock}>\r\n            <span onDoubleClick={activateEditMode} >{props.status || \"The status is not specified\"}</span>\r\n        </div>}\r\n   {editMode &&\r\n        <div>\r\n            <input onChange={onStatusChange}  autoFocus={true} onBlur={deactivateEditMode} value={status}/>\r\n        </div>}\r\n    \r\n   \r\n\r\n</div>\r\n  )\r\n}\r\n\r\n","import React from \"react\";\r\nimport { reduxForm } from \"redux-form\";\r\nimport { Input, Textarea, createField } from \"../../FormControls/FormControls\";\r\nimport style from \"./ProfileInfo.module.css\";\r\n\r\n\r\n const ProfileDataForm =(props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n          <button  >save</button>\r\n          {props.error && <div className={style.formSummaryError }>{props.error}</div>}\r\n        </div>\r\n        <div>\r\n            <p>Full Name: {createField(\"Full Name\", \"fullName\", [], Input)}</p> \r\n        </div>\r\n        <div>\r\n        <p>Looking for a job:{createField('', 'lookingForAJob', [], Input, {type: \"checkbox\"})}</p> \r\n        </div>\r\n        <div> <p>My professional skills: {createField(\"Skills\", 'lookingForAJobDescription', [], Textarea )}</p> \r\n            </div>\r\n        <div>\r\n        <p > About me:{createField(\"About me\", \"aboutMe\", [], Textarea)}</p>\r\n        </div>\r\n        <div>\r\n        <p className={style.contacts}>Contacts</p> \r\n        <div className={style.descriptionEdit}>\r\n        \r\n             {Object.keys(props.profile.contacts || {}).map(key => {\r\n        \r\n              return <div key={key}>\r\n                <p>{key}: {createField(key, \"contacts.\" + key, [], Input)}</p>\r\n                 </div>\r\n             })}\r\n        </div>\r\n        </div>\r\n \r\n      </form>\r\n    )\r\n  \r\n  }\r\n\r\n  const ProfileDataReduxForm = reduxForm({\r\n    // a unique name for the form\r\n    form: 'profileData'\r\n  })(ProfileDataForm)\r\n  export default ProfileDataReduxForm;","import React, { useState } from \"react\";\r\nimport style from \"./ProfileInfo.module.css\";\r\nimport Preloader from \"../../Preloader/Preloader\";\r\n\r\nimport ProfileStatusFunc from \"./ProfileStatusFunc\";\r\n\r\nimport ProfileDataReduxForm from \"./ProfileDataForm\";\r\nlet url = \"https://buzookod.ru/media/2816616767_vubrbeJ.jpg\";\r\n\r\nexport default function ProfileInfo(props) {\r\n\r\n\r\nlet [editMode, setEditMode] = useState(false);\r\n\r\n  if (!props.profile) {\r\n    return <Preloader />;\r\n  }\r\n\r\n  const onMainPhotoSelected = (e) => {\r\n    if (e.target.files.length) {\r\n      props.savePhoto(e.target.files[0]);\r\n    }\r\n  };\r\n\r\n  const onSubmit = (formData) => {\r\n    props.saveProfile(formData).then( //надо дождаться с сервера ответа на наличие ошибки и только потом закрывать режим редактирования\r\n    (res) => {\r\n      if(!res)  return setEditMode(false) //saveProfileThunk делаю return response.data.resultCode который возвращает инфу о налчии/отсутствии ошибки\r\n    }\r\n   );\r\n  \r\n   \r\n  }\r\n  return (\r\n    <div>\r\n      <div>\r\n        <img\r\n          className={style.main_content_img}\r\n          src=\"https://static.tildacdn.com/tild3031-6564-4332-a464-643231303036/39.jpg\"\r\n          alt=\"\"\r\n        ></img>\r\n      </div>\r\n\r\n      {/*<ProfileStatus status={props.status} updateStatus={props.updateStatus}/>*/}\r\n      <ProfileStatusFunc\r\n        status={props.status}\r\n        updateStatus={props.updateStatus}\r\n        isOwner={props.isOwner}\r\n      />\r\n      <div >\r\n        <div className={style.ava}>\r\n          <img\r\n            className={style.content_logo}\r\n            src={props.profile.photos.small || url} alt=\"\"></img>\r\n          \r\n        </div>\r\n        <div>\r\n        {props.isOwner && (\r\n          <input\r\n            className={style.profileInput}\r\n            type={\"file\"}\r\n            onChange={onMainPhotoSelected}\r\n          />\r\n        )}\r\n        </div>\r\n         \r\n      </div>\r\n      {editMode ? <ProfileDataReduxForm initialValues={props.profile} onSubmit={onSubmit} profile={props.profile}  /> \r\n      : <ProfileData profile={props.profile} isOwner={props.isOwner}\r\n      toEditMode={() => {setEditMode(true)}}/> }\r\n          \r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nconst ProfileData = ({profile, isOwner, toEditMode}) => {\r\n\r\n  return (<div>\r\n    <h3 className={style.fullName}>{profile.fullName}</h3>\r\n    <div>\r\n      {isOwner && <button className={style.profileEditButton} onClick={toEditMode}>edit</button>}\r\n    </div>\r\n      <p className={style.contacts}>Contacts</p> \r\n        <div className={style.description}>\r\n        \r\n             {Object.keys(profile.contacts || {}).map(key => {\r\n        \r\n              return <Contacts key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n             })}\r\n        </div>\r\n        <div className={style.aboutMe}>aboutMe:\r\n          <p > {profile.aboutMe}</p>\r\n          <p>Looking for a job: {profile.lookingForAJob ? 'yes' : 'no'}</p>\r\n              </div>\r\n              {profile.lookingForAJob &&\r\n        <div> <p>My professional skills: {profile.lookingForAJobDescription}</p>\r\n            </div>}\r\n  </div>\r\n  \r\n  )\r\n}\r\n\r\nconst Contacts = ({contactTitle, contactValue}) => {\r\n  return (<div className={style.contactItem}> \r\n              <div>{contactTitle}: </div>\r\n                    <div className={style.contactValue}>{contactValue}</div> \r\n              \r\n          </div>)\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"new_posts\":\"MyPosts_new_posts__op6dy\",\"title\":\"MyPosts_title__USYvv\",\"button_block\":\"MyPosts_button_block__Kc6fS\"};","import React, { useEffect } from \"react\";\r\nimport Post from \"./Post/Post\";\r\nimport style from \"./MyPosts.module.css\";\r\nimport { Field, reduxForm, reset } from \"redux-form\";\r\nimport {\r\n  maxLengthCreator,\r\n  requiredField,\r\n} from \"../../../utils/validators/validator\";\r\nimport { Textarea } from \"../../FormControls/FormControls\";\r\nimport MessageBlock from \"../../Dialogs/MessageBlock\";\r\n\r\nconst maxLength310 = maxLengthCreator(310); //устанавливаем значие длины сообщения\r\n\r\n//React.memo для контроля перерендинга в функциональной компоненте, перерендинг ТОЛЬКО при изменении пропс или стайт\r\n//в классовой компоненте для этих целей надо использовать extends React.PureComponent\r\nfunction MyPosts(props) {\r\n\r\n  let userId = props.router.params.userId;\r\n  let owner = props.owner\r\n \r\n  let isUser = !userId ? owner : userId\r\n  \r\n //alert('render')\r\n //console.log(\"RENDER\")\r\n\r\n \r\n\r\n  let onAddPost = (values) => {\r\n    props.sendMessage(isUser, values.body); //newPostText название name из Field\r\n  };\r\n\r\n  useEffect(()=> {\r\n    props.getListMessages(isUser)\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      {userId ? <div>\r\n        <h2 className={style.title}>My posts</h2>\r\n\r\n      <AddPostFormRedux onSubmit={onAddPost} />\r\n\r\n      <div className={style.new_posts}>New posts</div>\r\n      <MessageBlock friendId={isUser} dialogs={props.dialogs} owner={owner} data={props.dialogsData} />\r\n      </div> : <div></div>  }\r\n      \r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nconst addPostForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <Field\r\n        component={Textarea}\r\n        name=\"body\"\r\n        validate={[requiredField, maxLength310]}\r\n        placeholder=\"Post text\"\r\n      />\r\n\r\n      <div className={style.button_block}>\r\n        <button>Add post</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst afterSubmit = (result, dispatch) =>\r\n  dispatch(reset('myPostsAddForm')); //очистка полей формы после отправки\r\n\r\nconst AddPostFormRedux = reduxForm({ form: \"myPostsAddForm\",\r\nonSubmitSuccess: afterSubmit,})(addPostForm);\r\nexport default MyPosts;\r\n","import React from \"react\";\r\n\r\nimport MyPosts from \"../MyPosts\";\r\nimport { addPostActionCreator } from \"../../../../redux/profileReducer\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { getListMessagesThunk, sendMessageThunk, startChatingThunk } from \"../../../../redux/dialogsReducer\";\r\nimport { withRouter } from \"../../ProfileContainer\";\r\nimport { withAuthRedirect } from \"../../../../hoc/withAuthRedirect\";\r\n\r\n\r\n\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n       postsData: state.profilePage.postsData,\r\n        newPostText: state.profilePage.newPostText,\r\n      dialogsData: state.dialogsPage.dialogsData,\r\n      dialogs: state.dialogsPage.dialogs,\r\n    friends: state.dialogsPage.friends,\r\n    owner:state.auth.id\r\n    \r\n\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n     \r\n        addPost: (newPostText)=> { //newPostText название name из Field из MyPosts\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n\r\n    }\r\n}\r\nconst MyPostsContainer = compose(connect (mapStateToProps,\r\n     {mapDispatchToProps,\r\n        getListMessages: getListMessagesThunk,\r\n        sendMessage: sendMessageThunk\r\n\r\n}), withRouter)  (MyPosts)\r\n\r\nexport default MyPostsContainer;","import React from \"react\";\r\n\r\nimport ProfileInfo from \"./MyPosts/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/Post/MyPostsContainer\";\r\n\r\n\r\n\r\nfunction Profile (props) {\r\n    return (\r\n        <div >\r\n        \r\n       <ProfileInfo profile={props.profile}\r\n       status={props.status} \r\n       updateStatus={props.updateStatus}\r\n       isOwner={props.isOwner}\r\n       savePhoto={props.savePhoto}\r\n       saveProfile={props.saveProfile}/>\r\n        <MyPostsContainer\r\n        \r\n        \r\n      \r\n    \r\n        \r\n         />\r\n       \r\n       \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;\r\n\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport Profile from \"./Profile\";\r\nimport { connect } from \"react-redux\";\r\nimport { getUserProfileThunk, getUserStatusThunk, savePhotoThunk, saveProfileThunk, setUserProfileCreator, updateUserStatusThunk } from \"../../redux/profileReducer\";\r\nimport { Navigate, useLocation, useNavigate, useParams } from \"react-router-dom\";\r\nimport { usersAPI } from \"../../api/api\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\n//withRouter чтобы прокидывать url адрес пользователя в profile\r\nexport function withRouter(Component) {\r\n    function ComponentWithRouterProp(props) {\r\n        let location = useLocation();\r\n        let navigate = useNavigate();\r\n        let params = useParams();\r\n        return (\r\n            <Component\r\n                {...props}\r\n                router={{ location, navigate, params }}\r\n            />\r\n        );\r\n    }\r\n\r\n    return ComponentWithRouterProp;\r\n}\r\n\r\n\r\nclass ProfileContainer extends React.Component  {\r\n    \r\n    refreshProfile() {\r\n     // debugger;\r\n        let profileId = this.props.router.params.userId; //userId это название роута из App.js\r\n        if (!profileId) {\r\n            profileId = this.props.authorezedUserId\r\n        }\r\n        this.props.getUserProfileThunk(profileId)\r\n        this.props.getUserStatusThunk(profileId)\r\n      /* перенос в profileReduser\r\n       profileAPI.getProfile(profileId)\r\n            (перенос в api и замена на profileAPI.getProfile)\r\n            axios.get(`https://social-network.samuraijs.com/api/1.0/profile/${profileId}`) \r\n        .then(res => {\r\n            this.props.setUserProfile(res.data)\r\n           \r\n          });*/\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    //чтобы обновить пользователя при смене его Id\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if(this.props.router.params.userId !== prevProps.router.params.userId)  {\r\n            this.refreshProfile();\r\n        }\r\n        \r\n    }\r\n\r\n    render() {\r\n        \r\n        return (\r\n                <div >\r\n                \r\n            <Profile \r\n                {...this.props} \r\n                isOwner= {!this.props.router.params.userId} //двойное отрицание приводит к булевому значению false. т.е если Id не указано то ты owner так как прошла авторизация\r\n                profile={this.props.profile} \r\n                status = {this.props.status}\r\n                updateStatus= {this.props.updateStatus}\r\n                savePhoto = {this.props.savePhoto}\r\n            \r\n            \r\n            /> \r\n            {/* {...this.props}передача всех props*/}\r\n           \r\n            \r\n            \r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n  \r\n\r\n    //hoc перенос в compose\r\n    //let AuthRedirectComponent = withAuthRedirect(ProfileContainer)\r\n    \r\n   /*запись аналогична let AuthRedirectComponent =  (props) => {\r\n        if (!props.isAuth) return <Navigate to=\"/login\"></Navigate>\r\n        return <ProfileContainer {...props}/>\r\n    }*/\r\n    \r\n  \r\n\r\n\r\n\r\n    let mapStateToProps = (state) => ({\r\n        profile: state.profilePage.profile,\r\n      //  isAuth: state.auth.isAuth\r\n      status: state.profilePage.status,\r\n      authorezedUserId: state.auth.id,\r\n      isAuth: state.auth.isAuth,\r\n      dialogs: state.dialogsPage.dialogs,\r\n       \r\n    })\r\n\r\n// перенос в compose\r\n/*export default connect (mapStateToProps, {\r\n    setUserProfile: setUserProfileCreator ,\r\n    getUserProfileThunk: getUserProfileThunk\r\n}) (withRouter(AuthRedirectComponent))*/\r\n\r\nexport default  compose(connect (mapStateToProps, {\r\n   // setUserProfile: setUserProfileCreator ,\r\n    getUserProfileThunk: getUserProfileThunk,\r\n    getUserStatusThunk: getUserStatusThunk,\r\n    updateStatus: updateUserStatusThunk,\r\n    savePhoto: savePhotoThunk,\r\n    saveProfile: saveProfileThunk,\r\n\r\n\r\n}),\r\n    withRouter,\r\n    withAuthRedirect\r\n )(ProfileContainer)","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__Hfhik\",\"dialog_items\":\"Dialogs_dialog_items__cRBby\",\"dialog\":\"Dialogs_dialog__Q98LB\",\"active\":\"Dialogs_active__BGmeI\",\"messages\":\"Dialogs_messages__Hn39d\",\"message\":\"Dialogs_message__vb6mQ\",\"send_message\":\"Dialogs_send_message__YnmAQ\",\"button_block\":\"Dialogs_button_block__mJvxq\",\"block_textarea\":\"Dialogs_block_textarea__m+tII\",\"dialogsPhoto\":\"Dialogs_dialogsPhoto__Y8rAf\",\"photoBlock\":\"Dialogs_photoBlock__ig+I2\",\"messageBody\":\"Dialogs_messageBody__3XWnP\",\"friendBlock\":\"Dialogs_friendBlock__Uyg7I\",\"nameFriend\":\"Dialogs_nameFriend__FFeFV\",\"newMessages\":\"Dialogs_newMessages__ztAb2\",\"messageBodyRecieved\":\"Dialogs_messageBodyRecieved__N9rAj\",\"messageRecieved\":\"Dialogs_messageRecieved__1CElr\",\"messageBlock\":\"Dialogs_messageBlock__KX3mI\",\"dateBlock\":\"Dialogs_dateBlock__Ix886\",\"newMessage\":\"Dialogs_newMessage__cmP0s\",\"checkMark\":\"Dialogs_checkMark__+mD3P\",\"checkMarkBox\":\"Dialogs_checkMarkBox__NK+TY\",\"backet\":\"Dialogs_backet__tajrz\"};"],"names":["MessageBlock","props","messagesElemants","dialogs","reverse","map","obj","_jsx","children","Message","messageId","id","message","body","senderId","friendId","recipientId","owner","senderName","addedAt","viewed","delMessage","imgPath","notViewed","checkMarckBlack","wiewed","checkMarckGreen","open","setOpen","useState","imgCheck","newDate","moment","format","_jsxs","className","style","messageRecieved","messageBlock","dateBlock","messageBody","checkMarkBox","onClick","backet","src","alt","checkMark","messageBodyRecieved","newMessage","toggleCheckMark","ProfileStatusFunc","editMode","setEditMode","status","setStatus","useEffect","statusBlock","onDoubleClick","activateEditMode","isOwner","onChange","e","currentTarget","value","autoFocus","onBlur","deactivateEditMode","updateStatus","reduxForm","form","onSubmit","handleSubmit","error","formSummaryError","createField","Input","type","Textarea","contacts","descriptionEdit","Object","keys","profile","key","url","ProfileInfo","Preloader","main_content_img","ava","content_logo","photos","small","profileInput","target","files","length","savePhoto","ProfileDataReduxForm","initialValues","formData","saveProfile","then","res","ProfileData","toEditMode","_ref","fullName","profileEditButton","description","Contacts","contactTitle","contactValue","aboutMe","lookingForAJob","lookingForAJobDescription","_ref2","contactItem","maxLength310","maxLengthCreator","AddPostFormRedux","onSubmitSuccess","afterSubmit","result","dispatch","reset","Field","component","name","validate","requiredField","placeholder","userId","router","params","isUser","getListMessages","values","sendMessage","data","dialogsData","compose","connect","state","postsData","profilePage","newPostText","dialogsPage","friends","auth","mapDispatchToProps","addPost","addPostActionCreator","getListMessagesThunk","sendMessageThunk","withRouter","MyPosts","MyPostsContainer","Component","location","useLocation","navigate","useNavigate","useParams","ProfileContainer","React","refreshProfile","profileId","this","authorezedUserId","getUserProfileThunk","getUserStatusThunk","componentDidMount","componentDidUpdate","prevProps","prevState","snapshot","render","Profile","isAuth","updateUserStatusThunk","savePhotoThunk","saveProfileThunk","withAuthRedirect"],"sourceRoot":""}